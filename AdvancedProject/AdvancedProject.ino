#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "LowPower.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128

// The array below is a hexidecimal representation of the Omnitech Logo in 128x64 resolution
static const unsigned char PROGMEM logo_bmp[] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0xc0, 0xf8, 0x0f, 0x80, 0x7f, 0x80, 0x7f, 0xf0, 0x03, 0xc0, 0xff, 0xe0, 0x07, 0xff, 0xe0, 
0x03, 0xe0, 0xf8, 0x0f, 0x81, 0xff, 0xe0, 0x7f, 0xfc, 0x07, 0xe0, 0xff, 0xf8, 0x07, 0xff, 0xe0, 
0x07, 0xe0, 0xf8, 0x0f, 0x83, 0xff, 0xe0, 0x7f, 0xfe, 0x07, 0xe0, 0xff, 0xfc, 0x07, 0xff, 0xe0, 
0x07, 0xe0, 0xfc, 0x0f, 0x87, 0xff, 0xf0, 0x7f, 0xff, 0x07, 0xe0, 0xff, 0xfe, 0x07, 0xff, 0xe0, 
0x03, 0xc0, 0xfc, 0x0f, 0x87, 0xe1, 0xf0, 0x7e, 0x7f, 0x03, 0xc0, 0xf8, 0xfe, 0x07, 0xe0, 0x00, 
0x00, 0x00, 0xfc, 0x0f, 0x87, 0xc0, 0xf8, 0x7c, 0x1f, 0x80, 0x00, 0xf8, 0x3f, 0x07, 0xc0, 0x00, 
0x00, 0x00, 0xfe, 0x0f, 0x87, 0xc0, 0xf8, 0x7c, 0x0f, 0x80, 0x00, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x00, 0x00, 0xfe, 0x0f, 0x87, 0xc0, 0x00, 0x7c, 0x0f, 0x80, 0x00, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x00, 0x00, 0xfe, 0x0f, 0x87, 0xc0, 0x00, 0x7c, 0x07, 0x80, 0x00, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xfe, 0x0f, 0x87, 0xc0, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x0f, 0x87, 0xe0, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x0f, 0x83, 0xe0, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x0f, 0x83, 0xf0, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x8f, 0x81, 0xf8, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x8f, 0x81, 0xf8, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0x8f, 0x80, 0xfc, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xff, 0xcf, 0x80, 0x7e, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xff, 0x80, 
0x03, 0xe0, 0xfb, 0xcf, 0x80, 0x7e, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xff, 0x80, 
0x03, 0xe0, 0xfb, 0xcf, 0x80, 0x3f, 0x00, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xff, 0x80, 
0x03, 0xe0, 0xfb, 0xcf, 0x80, 0x1f, 0x80, 0x7c, 0x07, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xff, 0x80, 
0x03, 0xe0, 0xf9, 0xef, 0x80, 0x1f, 0x80, 0x7c, 0x0f, 0x83, 0xc0, 0xf8, 0x1f, 0x07, 0xe0, 0x00, 
0x03, 0xe0, 0xf9, 0xef, 0x80, 0x0f, 0xc0, 0x7c, 0x0f, 0x83, 0xc0, 0xf8, 0x3f, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf9, 0xff, 0x80, 0x07, 0xe0, 0x7c, 0x1f, 0x83, 0xc0, 0xf8, 0x7e, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0xff, 0x80, 0x07, 0xe0, 0x7f, 0xff, 0x03, 0xc0, 0xff, 0xfe, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0xff, 0x80, 0x03, 0xf0, 0x7f, 0xff, 0x03, 0xc0, 0xff, 0xfc, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0xff, 0x80, 0x01, 0xf0, 0x7f, 0xfe, 0x03, 0xc0, 0xff, 0xf8, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x7f, 0x80, 0x01, 0xf8, 0x7f, 0xfc, 0x03, 0xc0, 0xff, 0xf0, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x7f, 0x80, 0x00, 0xf8, 0x7f, 0xe0, 0x03, 0xc0, 0xf9, 0xf0, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x7f, 0x80, 0x00, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0xf8, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x3f, 0x80, 0x00, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0xf8, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x3f, 0x87, 0x80, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0xf8, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x3f, 0x87, 0xc0, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x7c, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x1f, 0x87, 0xc0, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x7c, 0x07, 0xc0, 0x00, 
0x03, 0xe0, 0xf8, 0x1f, 0x87, 0xff, 0xf8, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x7e, 0x07, 0xff, 0xe0, 
0x03, 0xe0, 0xf8, 0x1f, 0x83, 0xff, 0xf0, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x3e, 0x07, 0xff, 0xe0, 
0x03, 0xe0, 0xf8, 0x1f, 0x81, 0xff, 0xe0, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x3e, 0x07, 0xff, 0xe0, 
0x03, 0xe0, 0xf8, 0x0f, 0x80, 0xff, 0xc0, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x3f, 0x07, 0xff, 0xe0, 
0x03, 0xc0, 0xf8, 0x0f, 0x80, 0x3f, 0x80, 0x7c, 0x00, 0x03, 0xc0, 0xf8, 0x1f, 0x07, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x08, 0x38, 0x86, 0x44, 0x9f, 0x78, 0xe2, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x90, 0x6c, 0xc6, 0x64, 0x0c, 0x61, 0xb2, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x90, 0x44, 0xc6, 0x64, 0x0c, 0x41, 0x12, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x60, 0x44, 0xee, 0x74, 0x8c, 0x61, 0x02, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x60, 0x44, 0xee, 0x54, 0x8c, 0x71, 0x03, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x60, 0x44, 0xb6, 0x4c, 0x8c, 0x41, 0x12, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x60, 0x44, 0x86, 0x4c, 0x8c, 0x41, 0x12, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x60, 0x3c, 0x86, 0x44, 0x8c, 0x79, 0xf2, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// This function will draw the logo stored in the array logo_bmp to the screen
void drawbitmap(void) 
{
  display.clearDisplay(); // Clears the Display
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display(); // Apply the changes to the screen
}

void drawName(void) 
{
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);  // Draw white text (this screen only supports white)
  display.setCursor(28,26);             // Start at top-left corner
  display.setTextSize(2);               // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.println(F("Adrian"));
  display.display();
}

void setup() {
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) // Start communicating with the display
  { // Address 0x3D for 128x64
    LowPower.idle(SLEEP_FOREVER, 
    ADC_OFF, 
    TIMER2_OFF, 
    TIMER1_OFF, 
    TIMER0_OFF, 
    SPI_OFF, 
    USART0_OFF, 
    TWI_OFF); // Don't proceed. Halt the processor
  }

  display.clearDisplay(); //  Clear out whatever is on the screen

  drawbitmap();           // Draw the bitmap

  LowPower.idle(SLEEP_2S, ADC_OFF, TIMER2_OFF, TIMER1_OFF, TIMER0_OFF, 
                SPI_ON, USART0_OFF, TWI_OFF); // Wait for 2 seconds
  drawName(); // Draw the name
}

void loop() 
{
  LowPower.idle(SLEEP_FOREVER, ADC_OFF, TIMER2_OFF, TIMER1_OFF, TIMER0_OFF, 
                SPI_OFF, USART0_OFF, TWI_OFF); // Sleep forever
}

void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
}

void testdrawrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testfillrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=3) {
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) 
  {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) 
  {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) 
  {
    display.drawTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) 
  {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
}

void testscrolltext(void) {
  display.clearDisplay();

  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
  display.display();      // Show initial text
  delay(100);

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
  delay(1000);
}

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) 
{
  for(;;) 
  { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    display.drawBitmap(0, 0, bitmap, w, h, SSD1306_WHITE);

    display.display(); // Show the display buffer on the screen
    delay(2000);        // Pause for 1/10 second
  }
}
